# Cursor Rules for Karabiner Configuration Project

## Project Structure

- This is a TypeScript project for configuring Karabiner-Elements keyboard customization
- Uses CommonJS module system (not ESM)
- Uses karabiner.ts library for configuration

## Module System

- IMPORTANT: This project uses CommonJS, not ESM
- Do not add "type": "module" to package.json
- Keep tsconfig.json with "module": "CommonJS" and "moduleResolution": "node"
- Do not use ESM-specific syntax like import assertions or top-level await

## TypeScript Configuration

- Target: ES2024
- Module: CommonJS
- ModuleResolution: node
- Strict type checking is enabled

## Imports/Exports

- Use CommonJS-compatible import syntax: `import { x } from 'y'`
- Do not add file extensions to imports (e.g., use '../utils/emoji-helpers', not '../utils/emoji-helpers.js')
- When importing from karabiner.ts, use: `import { x } from 'karabiner.ts'`

## Code Style

- Follow ESLint rules configured in .eslintrc.cjs
- Use 2 spaces for indentation
- Use single quotes for strings
- Use trailing commas in multiline objects/arrays

## Scripts

- Use `pnpm generate` to generate the Karabiner configuration
- Use `pnpm apply` to generate and apply changes
- Use `pnpm validate` to run linting and type checking

## Common Pitfalls

- DO NOT convert to ESM - karabiner.ts uses CommonJS internally
- DO NOT use dynamic imports unless absolutely necessary
- DO NOT modify the module system configuration
- When adding new files, follow the existing pattern of CommonJS modules

## File Organization

- Place utility functions in the utils/ directory
- Place Karabiner rule definitions in the rules/ directory
- Constants should go in constants.ts
- Main configuration is in rules.ts

## Type Safety

- Prefer explicit types over 'any'
- Use the LeaderActionFn type for leader key actions
- When working with karabiner.ts types, check for exported types before using internal ones
